# -*- coding: utf-8 -*-
"""Adamax_Prepoznavanje_znamenaka.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1iNMrYyANE8owOe5LCJme18ch5g4CZVp0
"""

import tensorflow as tf
from tensorflow import keras
import matplotlib.pyplot as plt
import numpy as np
import os

from tensorflow.keras.layers import Conv2D, MaxPooling2D, Dropout, Flatten, Dense
import pandas as pd
import seaborn as sns
import cv2
import IPython
from six.moves import urllib

mnist = tf.keras.datasets.mnist
(train_img, train_oznake), (test_img, test_oznake) = mnist.load_data()

import matplotlib.pyplot as plt
plt.imshow(train_img[1000])
print(train_oznake[1000])
print("______________________________________________________________________")
print(train_img[1000])

train_img = train_img/255.0
test_img = test_img/255.0

model = tf.keras.models.Sequential([tf.keras.layers.Flatten(),
                                    tf.keras.layers.Dense(128, activation = tf.nn.relu),
                                    tf.keras.layers.Dropout(0.5),
                                    tf.keras.layers.Dense(128, activation = tf.nn.relu),
                                    tf.keras.layers.Dense(10, activation = tf.nn.softmax)])

model.compile(optimizer = tf.keras.optimizers.Adamax(),
              loss = 'sparse_categorical_crossentropy',
              metrics = ['accuracy'])

povjest = model.fit(train_img, train_oznake, epochs = 20, validation_split = 0.1,)

pov = pd.DataFrame(povjest.history)
pov['epoch'] = povjest.epoch

procjena = model.evaluate(test_img, test_oznake)

plt.figure() 
    plt.xlabel('Epoch')
    plt.ylabel('Loss')
    plt.plot(pov['epoch'], pov.loss, label='Train Loss')
    plt.plot(pov['epoch'], pov.val_loss, label='Validation Loss')
    plt.legend()
    plt.ylim([min((pov.loss-0.005), (pov.val_loss-0.005)),max((pov.loss+0.005), (pov.val_loss+0.005))])

plt.figure()
    plt.xlabel('Epoch')
    plt.ylabel('Accuracy')
    plt.plot(pov['epoch'], pov.accuracy, label='Train accuracy')
    plt.plot(pov['epoch'], pov.val_accuracy, label='Validation accuracy')
    plt.legend()
    plt.ylim([min((pov.accuracy-0.005), (pov.val_accuracy-0.005)),max((pov.accuracy+0.005), (pov.val_accuracy+0.005))])